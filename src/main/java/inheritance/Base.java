package inheritance;


public class Base /*extends java.lang.Object*/ {
  static int x = getStaticDefault();
  static {
    System.out.println("static initializer block in Base");
  }
  // right side of this must be an expression--no exception handling
  // and loops/conditions are ugly
  int day = getDefaultDay(); // getDefaultDay() > 0 ? 99 : 100;
  {
    System.out.println("Running instance initializer 1");
  }
  int month = getDefaultMonth();
  {
    System.out.println("Running instance initializer 2");
  }
  int year = getDefaultYear();
  {
    System.out.println("Running instance initializer 3");
  }

  public static int getStaticDefault() {
    System.out.println("Getting static default");
    return 99;
  }
  public static int getDefaultDay() {
    System.out.println("getDefaultDay()");
    return 1;
  }
  public static int getDefaultYear() {
    System.out.println("getDefaultYear()");
    return 1;
  }
  public static int getDefaultMonth() {
    System.out.println("getDefaultMonth()");
    return 1;
  }
  public Base(int day) {
//    this.day = day;
//    this.month = 1;
//    this.year = 2022;
    this(day, 1, 2022);
    System.out.println("returned to Base(int)");
  }
  public Base(int day, int month) {
//    this.day = day;
//    this.month = month;
//    this.year = 2022;
    this(day, month, 2022); // this() replaces super()...
    System.out.println("returned to Base(int, int)");
  }
  public Base(int day, int month, int year) {
    super(); // generated by compiler if not present...
    // immediately on return from super() perform instance initialization
    System.out.println("returned to Base(int, int, int)");
    this.day = day;
    this.month = month;
    this.year = year;
  }
}

class Sub extends Base {
  static {
    System.out.println("Static initializer in Sub");
  }
  String name;
  {
    System.out.println("Instance init of Sub");
  }
  Sub(int day, int month, int year, String name) {
//    this(name); // recursive / circular invocations fail to compile
    super(day, month, year);
    // instance initialization!!!
    System.out.println("Returned to Sub(int, int, int, String");
    this.name = name;
  }

  Sub(String name) {
    this(1, 1, 1, name); // only this OR super, not both (must be first)
    System.out.println("Returned to Sub(String");
//    super(1, 1, 1);
  }
}

class TryIt {
  public static void main(String[] args) {
    new Sub("Odd");
    new Sub("Odd");
  }
}
